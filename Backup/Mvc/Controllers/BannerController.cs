/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.21
</auto-generated>
------------------------------------------------------------------------------ */

using Progress.Sitefinity.Renderer.Designers.Attributes;
using Progress.Sitefinity.Renderer.Entities.Content;
using Progress.Sitefinity.Renderer.Models;
using SitefinityWebApp.Mvc.Models;
using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web.Mvc;
using Telerik.Sitefinity.Modules.Libraries;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.Personalization;

namespace SitefinityWebApp.Mvc.Controllers
{
	[ControllerToolboxItem(Name = "Banner_MVC", Title = "Banner", SectionName = "CustomWidgets")]
	public class BannerController : Controller, IPersonalizable
	{
		// GET: Banner
		public ActionResult Index()
		{
			var model = new BannerModel();
			model.Message = this.Message;
			model.ImageDesktopUrl = this.ImageDesktop != null ? GetMediaUrlByImageId(new Guid(ImageDesktop.ItemIdsOrdered[0]), false) : string.Empty;
			model.ImageMobileUrl = this.ImageMobile != null ? GetMediaUrlByImageId(new Guid(ImageMobile.ItemIdsOrdered[0]), false) : string.Empty;
			model.Link = this.Link;

			model.CssClasses = "banner ";
			if(this.Size == EnumSingle.Medium)
            {
				model.CssClasses += "banner-medium ";
            }
			else if(this.Size == EnumSingle.Small)
            {
				model.CssClasses += "banner-small ";
			}
			if(this.Link != null && !string.IsNullOrEmpty(this.Link.Href))
            {
				model.CssClasses += "banner-link ";
            }
            if (!string.IsNullOrEmpty(this.CssClass))
            {
				model.CssClasses += this.CssClass.Trim();
            }
			model.CssClasses.Trim();

			model.CssClassText = "banner-text ";
            if (!string.IsNullOrEmpty(this.CssClassText))
            {
				model.CssClassText += this.CssClassText;
            }
			model.CssClassText.Trim();

			return View("Index", model);
		}
		
        protected override void HandleUnknownAction(string actionName)
        {
			Telerik.Sitefinity.Web.RouteHelper.SetUrlParametersResolved(true);
			this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
        }

		public string Message { get; set; }

		[Required]
		[Content(Type = KnownContentTypes.Images, AllowMultipleItemsSelection = false)]
		public MixedContentContext ImageDesktop { get; set; }

		[Content(Type = KnownContentTypes.Images, AllowMultipleItemsSelection = false)]
		public MixedContentContext ImageMobile { get; set; }
		public LinkModel Link { get; set; }

		[DefaultValue(EnumSingle.Full)]
		public EnumSingle Size { get; set; }

		[ContentSection("More Options")]
		[DisplayName("Css Classes")]
		public string CssClass { get; set; }

		[ContentSection("More Options")]
		[DisplayName("Message Css Classes")]
		public string CssClassText { get; set; }

		public enum EnumSingle
		{
			Full = 1,
			Medium = 2,
			Small = 3
		}
		private static string GetMediaUrlByImageId(Guid masterImageId, bool resolveAsAbsolutUrl)
		{
			var manager = LibrariesManager.GetManager();

			// Get the master version of the image
			var image = manager.GetImages().FirstOrDefault(i => i.Id == masterImageId);

			var mediaUlr = string.Empty;

			if (image != null)
			{
				// Resolve the media URL
				mediaUlr = image.ResolveMediaUrl(resolveAsAbsolutUrl);
			}

			return mediaUlr;
		}
	}
}