/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.21
</auto-generated>
------------------------------------------------------------------------------ */

using MoreLinq;
using SitefinityWebApp.Mvc.Models;
using SitefinityWebApp.MVC.Models.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using System.Web.Mvc;
using Telerik.Sitefinity;
using Telerik.Sitefinity.Libraries.Model;
using Telerik.Sitefinity.Modules.Libraries;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.Personalization;
using Telerik.Sitefinity.Modules.Pages;
using System.Globalization;
using Telerik.Sitefinity.Web;
using SitefinityWebApp.Mvc.Models.Utils;

namespace SitefinityWebApp.Mvc.Controllers
{
    [ControllerToolboxItem(Name = "InfoSelectDouble_MVC", Title = "InfoSelectDouble", SectionName = "CustomWidgets")]
    public class InfoSelectDoubleController : Controller, IPersonalizable
    {
        // GET: InfoSelectDouble
        public ActionResult Index()
        {
            var model = new InfoSelectDoubleModel();
            model.Heading = this.Heading;
            model.Description = this.Description;
            model.SelectOnePlaceholder = this.SelectOnePlaceholder;
            model.SelectTwoPlaceholder = this.SelectTwoPlaceholder;
            model.LibraryId = this.SerializedSelectedItemId;
            model.HasBackButton = this.HasBackButton;


            if (!string.IsNullOrEmpty(this.LinkedPage))
            {
                model.PageUrl = GetUrlByPageNodeId(this.LinkedPageId, "en", false, true);
            }
            else
            {
                model.PageUrl = string.Empty;
            }

            if (this.SerializedSelectedItemId != null)
            {
                LibraryData lib = JsonConvert.DeserializeObject<LibraryData>(this.SerializedSelectedItem);
                if (lib.ParentId != null || lib.RootId != Guid.Empty)
                {
                    var folder = Manager.GetFolder(lib.Id);
                    model.Folders = Manager.GetChildFolders(folder).ToList();
                    model.IsLibrary = false;
                }
                else
                {
                    var library = GetDocumentLibraryNativeAPI(new Guid(this.SerializedSelectedItemId));
                    model.Folders = GetChildFolders(library).ToList();
                    model.IsLibrary = true;

                }

            }

            return View("Index", model);
        }

        protected override void HandleUnknownAction(string actionName)
        {
            Telerik.Sitefinity.Web.RouteHelper.SetUrlParametersResolved(true);
            this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
        }

        public string Heading { get; set; }
        public string Description { get; set; }
        public string SelectOnePlaceholder { get; set; }
        public string SelectTwoPlaceholder { get; set; }
        public string SerializedSelectedItemId { get; set; }
        public string SerializedSelectedItem { get; set; }
        public Guid LinkedPageId { get; set; }
        public string LinkedPage { get; set; }
        public bool HasBackButton { get; set; }
        private LibrariesManager Manager { get; set; }
        private DocumentLibrary Library { get; set; }

        public InfoSelectDoubleController()
        {
            this.Manager = LibrariesManager.GetManager();
            if (!string.IsNullOrEmpty(this.SerializedSelectedItemId))
            {
                Guid libId = new Guid(SerializedSelectedItemId);
                this.Library = this.Manager.GetDocumentLibraries().Where(l => l.Id == libId).FirstOrDefault();
            }
        }

        private DocumentLibrary GetDocumentLibraryNativeAPI(Guid documentLibraryId)
        {
            LibrariesManager librariesManager = LibrariesManager.GetManager();
            DocumentLibrary library = librariesManager.GetDocumentLibraries().Where(l => l.Id == documentLibraryId).FirstOrDefault();

            return library;
        }

        public static IQueryable<IFolder> GetChildFolders(DocumentLibrary folder)
        {
            LibrariesManager librariesManager = LibrariesManager.GetManager();
            var childFolders = librariesManager.GetChildFolders(folder);
            return childFolders;
        }

        public static IQueryable<MediaContent> GetDocumentsByDocumentLibrary(IFolder folder)
        {
            LibrariesManager librariesManager = LibrariesManager.GetManager();

            IQueryable<MediaContent> documents = librariesManager.GetChildItems(folder);

            return documents;
        }

        [HttpGet, Route("get-docs")]
        public JsonResult SelectOneChange(string folderId)
        {
            try
            {
                if (string.IsNullOrEmpty(folderId))
                {
                    return Json(new
                    {
                        documents = new List<Object>()
                    }, JsonRequestBehavior.AllowGet);
                }
                //DocumentLibrary Library = Manager.GetDocumentLibrary(new Guid(libId));
                var folder = Manager.GetFolder(new Guid(folderId));
                if (folder != null)
                {
                    var documents = GetDocumentsByDocumentLibrary(folder).DistinctBy(x => x.FileId).ToList();
                    DocumentData[] data = documents.Select(x => new DocumentData
                    {
                        Id = x.Id.ToString(),
                        Title = x.Title.Value,
                        Url = x.Url
                    }).ToArray();

                    return Json(new
                    {
                        documents = data
                    }, JsonRequestBehavior.AllowGet);
                }

                return Json(new
                {
                    documents = new List<Object>()
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception e)
            {
                return Json(new
                {
                    documents = new List<Object>(),
                    error = e.Message
                }, JsonRequestBehavior.AllowGet);
            }
        }

        public string GetUrlByPageNodeId(Guid pageNodeId, string targetCulture, bool resolveAsAbsolutUrl, bool removeTrailingSlash)
        {
            var manager = PageManager.GetManager();

            // Get the pageNode
            var pageNode = manager
               .GetPageNodes()
               .FirstOrDefault(x => x.Id == pageNodeId);

            var culture = CultureInfo.GetCultureInfo(targetCulture);

            var url = String.Empty;
            if (pageNode != null)
            {
                // Get the URL of the pageNode
                url = pageNode.GetUrl(culture);

                if (resolveAsAbsolutUrl)
                {
                    // Get the absolute URL of the pageNode
                    url = UrlPath.ResolveUrl(url, true, true);
                }
                else if (removeTrailingSlash)
                {
                    url = UrlPath.ResolveUrl(url, false, true);
                }
            }

            return url;
        }

    }
}