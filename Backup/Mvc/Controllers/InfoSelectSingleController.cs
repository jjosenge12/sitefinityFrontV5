/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.21
</auto-generated>
------------------------------------------------------------------------------ */

using MoreLinq;
using Newtonsoft.Json;
using SitefinityWebApp.Mvc.Models;
using SitefinityWebApp.Mvc.Models.Utils;
using SitefinityWebApp.MVC.Models.Utils;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Web.Mvc;
using Telerik.Sitefinity;
using Telerik.Sitefinity.Libraries.Model;
using Telerik.Sitefinity.Modules.Libraries;
using Telerik.Sitefinity.Modules.Pages;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.Personalization;
using Telerik.Sitefinity.Web;

namespace SitefinityWebApp.Mvc.Controllers
{
    [ControllerToolboxItem(Name = "InfoSelectSingle_MVC", Title = "InfoSelectSingle", SectionName = "CustomWidgets")]
    public class InfoSelectSingleController : Controller, IPersonalizable
    {
        // GET: InfoSelectSingle
        public ActionResult Index()
        {
            var model = new InfoSelectSingleModel();
            model.Heading = this.Heading;
            model.Description = this.Description;
            model.SelectOnePlaceholder = this.SelectOnePlaceholder;
            model.LibraryId = this.SerializedSelectedItemId;
            model.HasBackButton = this.HasBackButton;


            if (!string.IsNullOrEmpty(this.LinkedPage))
            {
                model.PageUrl = GetUrlByPageNodeId(this.LinkedPageId, "en", false, true);
            }
            else
            {
                model.PageUrl = string.Empty;
            }

            if (this.SerializedSelectedItemId != null)
            {
                LibraryData lib = JsonConvert.DeserializeObject<LibraryData>(this.SerializedSelectedItem);
                var folder = Manager.GetFolder(lib.Id);
                model.Documents = GetDocumentsByDocumentLibrary(folder).DistinctBy(x => x.FileId).Select(x => new DocumentData
                {
                    Id = x.Id.ToString(),
                    Title = x.Title.Value,
                    Url = x.Url
                }).ToList();
            }

            return View("Index", model);
        }

        protected override void HandleUnknownAction(string actionName)
        {
            Telerik.Sitefinity.Web.RouteHelper.SetUrlParametersResolved(true);
            this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
        }

        public string Heading { get; set; }
        public string Description { get; set; }
        public string SelectOnePlaceholder { get; set; }
        public string SerializedSelectedItemId { get; set; }
        public string SerializedSelectedItem { get; set; }
        public Guid LinkedPageId { get; set; }
        public string LinkedPage { get; set; }
        public bool HasBackButton { get; set; }
        private LibrariesManager Manager { get; set; }

        public InfoSelectSingleController()
        {
            this.Manager = LibrariesManager.GetManager();
        }

        public static IQueryable<MediaContent> GetDocumentsByDocumentLibrary(IFolder folder)
        {
            LibrariesManager librariesManager = LibrariesManager.GetManager();

            IQueryable<MediaContent> documents = librariesManager.GetChildItems(folder);

            return documents;
        }

        public string GetUrlByPageNodeId(Guid pageNodeId, string targetCulture, bool resolveAsAbsolutUrl, bool removeTrailingSlash)
        {
            var manager = PageManager.GetManager();

            // Get the pageNode
            var pageNode = manager
               .GetPageNodes()
               .FirstOrDefault(x => x.Id == pageNodeId);

            var culture = CultureInfo.GetCultureInfo(targetCulture);

            var url = String.Empty;
            if (pageNode != null)
            {
                // Get the URL of the pageNode
                url = pageNode.GetUrl(culture);

                if (resolveAsAbsolutUrl)
                {
                    // Get the absolute URL of the pageNode
                    url = UrlPath.ResolveUrl(url, true, true);
                }
                else if (removeTrailingSlash)
                {
                    url = UrlPath.ResolveUrl(url, false, true);
                }
            }

            return url;
        }
    }
}