/* ------------------------------------------------------------------------------
<auto-generated>
    This file was generated by Sitefinity CLI v1.1.0.21
</auto-generated>
------------------------------------------------------------------------------ */

using System.ComponentModel;
using Progress.Sitefinity.Renderer.Entities.Content;
using Progress.Sitefinity.Renderer.Designers.Attributes;
using SitefinityWebApp.Mvc.Models;
using System;
using System.Web.Mvc;
using Telerik.Sitefinity.Mvc;
using Telerik.Sitefinity.Personalization;
using Telerik.Sitefinity.Modules.Libraries;
using System.Linq;
using System.Collections.Generic;
using Telerik.Sitefinity.Libraries.Model;
using System.Web.Script.Serialization;
using SitefinityWebApp.Mvc.Models.Utils;

namespace SitefinityWebApp.Mvc.Controllers
{
    [ControllerToolboxItem(Name = "Carousel_MVC", Title = "Carousel", SectionName = "CustomWidgets")]
    public class CarouselController : Controller, IPersonalizable
    {
        // GET: TestWidget
        public ActionResult Index()
        {
            var model = new CarouselModel();
            try
            {
                model.ImagesDesktop = new List<string>();
                model.ImagesMobile = new List<string>();

                if (!string.IsNullOrEmpty(this.Images) && !string.IsNullOrEmpty(this.ImagesPath))
                {
                    var images = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(this.ImagesPath);
                    model.ImagesDesktop = images;
                }
                if (!string.IsNullOrEmpty(this.SlideOptions))
                {
                    var options = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SlideOptions>>(this.SlideOptions);
                    model.DesktopOptions = options;
                }

                if (!string.IsNullOrEmpty(this.MobileImages) && !string.IsNullOrEmpty(this.MobileImagesPath))
                {
                    var images = Newtonsoft.Json.JsonConvert.DeserializeObject<List<string>>(this.MobileImagesPath);
                    model.ImagesMobile = images;
                }
                if (!string.IsNullOrEmpty(this.MobileOptions))
                {
                    var options = Newtonsoft.Json.JsonConvert.DeserializeObject<List<SlideOptions>>(this.MobileOptions);
                    model.MobileOptions = options;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("\n\n------------------------------------\n\n" + e.Message + "\n\n------------------------------------\n\n\n");
                model.ImagesDesktop = new List<string>();
                model.ImagesMobile = new List<string>();
            }
            return View(model);
        }

        protected override void HandleUnknownAction(string actionName)
        {
            this.ActionInvoker.InvokeAction(this.ControllerContext, "Index");
        }

        public string ImagesPath { get; set; }
        public string Images { get; set; }
        public string SlideOptions { get; set; }
        public string MobileImagesPath { get; set; }
        public string MobileImages { get; set; }
        public string MobileOptions { get; set; }

        public static string GetMediaUrlByImageId(Guid masterImageId, bool resolveAsAbsolutUrl)
        {
            var manager = LibrariesManager.GetManager();

            // Get the master version of the image
            var image = manager.GetImages().FirstOrDefault(i => i.Id == masterImageId);

            var mediaUlr = String.Empty;

            if (image != null)
            {
                // Resolve the media URL
                mediaUlr = image.ResolveMediaUrl(resolveAsAbsolutUrl);
            }

            return mediaUlr;
        }
    }
}